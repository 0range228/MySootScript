final class Graph.BuildCallGraph$1 extends soot.jimple.AbstractExprSwitch
{
    final java.util.List val$targetMethodsList;
    final java.lang.String val$signature;

    void <init>(java.util.List, java.lang.String)
    {
        Graph.BuildCallGraph$1 r0;
        java.util.List r1;
        java.lang.String r2;

        r0 := @this: Graph.BuildCallGraph$1;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.lang.String;

        r0.<Graph.BuildCallGraph$1: java.util.List val$targetMethodsList> = r1;

        r0.<Graph.BuildCallGraph$1: java.lang.String val$signature> = r2;

        specialinvoke r0.<soot.jimple.AbstractExprSwitch: void <init>()>();

        return;
    }

    public void caseStaticInvokeExpr(soot.jimple.StaticInvokeExpr)
    {
        Graph.BuildCallGraph$1 r0;
        soot.jimple.StaticInvokeExpr r1;
        java.util.List $r2;
        soot.SootMethod $r3;

        r0 := @this: Graph.BuildCallGraph$1;

        r1 := @parameter0: soot.jimple.StaticInvokeExpr;

        $r2 = r0.<Graph.BuildCallGraph$1: java.util.List val$targetMethodsList>;

        $r3 = interfaceinvoke r1.<soot.jimple.StaticInvokeExpr: soot.SootMethod getMethod()>();

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r3);

        return;
    }

    public void caseSpecialInvokeExpr(soot.jimple.SpecialInvokeExpr)
    {
        soot.jimple.SpecialInvokeExpr r0;
        soot.SootMethod $r1, r5;
        soot.SootClass r2;
        Graph.BuildCallGraph$1 r3;
        java.lang.String $r4;
        java.util.List $r6;

        r3 := @this: Graph.BuildCallGraph$1;

        r0 := @parameter0: soot.jimple.SpecialInvokeExpr;

        $r1 = interfaceinvoke r0.<soot.jimple.SpecialInvokeExpr: soot.SootMethod getMethod()>();

        r2 = virtualinvoke $r1.<soot.SootMethod: soot.SootClass getDeclaringClass()>();

        $r4 = r3.<Graph.BuildCallGraph$1: java.lang.String val$signature>;

        r5 = staticinvoke <Graph.BuildCallGraph: soot.SootMethod Dispatch(soot.SootClass,java.lang.String)>(r2, $r4);

        $r6 = r3.<Graph.BuildCallGraph$1: java.util.List val$targetMethodsList>;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r5);

        return;
    }

    public void caseVirtualInvokeExpr(soot.jimple.VirtualInvokeExpr)
    {
        soot.Scene $r0, $r6;
        soot.jimple.VirtualInvokeExpr r1;
        soot.Value $r2;
        soot.Type $r3;
        java.lang.String $r4, $r15;
        soot.SootClass r5, r13;
        soot.Hierarchy r7;
        java.util.ArrayList $r8;
        java.util.List $r9, $r17;
        java.util.Iterator r11;
        boolean $z1;
        java.lang.Object $r12;
        Graph.BuildCallGraph$1 r14;
        soot.SootMethod r16;

        r14 := @this: Graph.BuildCallGraph$1;

        r1 := @parameter0: soot.jimple.VirtualInvokeExpr;

        $r0 = staticinvoke <soot.Scene: soot.Scene v()>();

        $r2 = interfaceinvoke r1.<soot.jimple.VirtualInvokeExpr: soot.Value getBase()>();

        $r3 = interfaceinvoke $r2.<soot.Value: soot.Type getType()>();

        $r4 = virtualinvoke $r3.<soot.Type: java.lang.String toString()>();

        r5 = virtualinvoke $r0.<soot.Scene: soot.SootClass getSootClass(java.lang.String)>($r4);

        $r6 = staticinvoke <soot.Scene: soot.Scene v()>();

        r7 = virtualinvoke $r6.<soot.Scene: soot.Hierarchy getActiveHierarchy()>();

        virtualinvoke r5.<soot.SootClass: void checkLevel(int)>(1);

        $r8 = new java.util.ArrayList;

        $r9 = virtualinvoke r7.<soot.Hierarchy: java.util.List getSubclassesOf(soot.SootClass)>(r5);

        specialinvoke $r8.<java.util.ArrayList: void <init>(java.util.Collection)>($r9);

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>(r5);

        r11 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r12 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>();

        r13 = (soot.SootClass) $r12;

        $r15 = r14.<Graph.BuildCallGraph$1: java.lang.String val$signature>;

        r16 = staticinvoke <Graph.BuildCallGraph: soot.SootMethod Dispatch(soot.SootClass,java.lang.String)>(r13, $r15);

        $r17 = r14.<Graph.BuildCallGraph$1: java.util.List val$targetMethodsList>;

        interfaceinvoke $r17.<java.util.List: boolean add(java.lang.Object)>(r16);

        goto label1;

     label2:
        return;
    }
}
