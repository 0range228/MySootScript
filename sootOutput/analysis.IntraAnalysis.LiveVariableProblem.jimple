public class analysis.IntraAnalysis.LiveVariableProblem extends java.lang.Object
{
    public static java.lang.String className;

    public void <init>()
    {
        analysis.IntraAnalysis.LiveVariableProblem this;

        this := @this: analysis.IntraAnalysis.LiveVariableProblem;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public static void main(java.lang.String[]) throws java.lang.Exception
    {
        java.lang.String $stack1;
        soot.PackManager $stack2;
        java.lang.String[] args;

        args := @parameter0: java.lang.String[];

        $stack1 = <analysis.IntraAnalysis.LiveVariableProblem: java.lang.String className>;

        staticinvoke <config.SootConfig: void setupSoot(java.lang.String)>($stack1);

        staticinvoke <analysis.IntraAnalysis.LiveVariableProblem: void varialbleAnalysis()>();

        $stack2 = staticinvoke <soot.PackManager: soot.PackManager v()>();

        virtualinvoke $stack2.<soot.PackManager: void writeOutput()>();

        return;
    }

    private static void varialbleAnalysis()
    {
        soot.Scene $stack8;
        java.lang.String $stack9, $stack15, $stack16, $stack22, $stack24, $stack36, $stack41, $stack44, $stack49;
        soot.SootClass sc;
        java.util.List $stack11;
        java.util.Iterator l1, l6;
        boolean $stack13, $stack17, $stack31;
        java.lang.Object $stack14, $stack33, $stack39, $stack47;
        soot.SootMethod method;
        java.io.PrintStream $stack20, $stack25, $stack32, $stack35, $stack43;
        java.lang.StringBuilder $stack21, $stack23, $stack37, $stack38, $stack40, $stack45, $stack46, $stack48, $u0, $u3, $u4;
        soot.Body $stack26, $r0;
        soot.jimple.JimpleBody body;
        soot.toolkits.graph.TrapUnitGraph g, $u1;
        pack.SimpleLiveVariablesAnalysis lva, $u2;
        soot.UnitPatchingChain $stack29;
        soot.Unit unit;
        soot.toolkits.graph.DirectedGraph $r1;

        $stack8 = staticinvoke <soot.Scene: soot.Scene v()>();

        $stack9 = <analysis.IntraAnalysis.LiveVariableProblem: java.lang.String className>;

        sc = virtualinvoke $stack8.<soot.Scene: soot.SootClass getSootClass(java.lang.String)>($stack9);

        $stack11 = virtualinvoke sc.<soot.SootClass: java.util.List getMethods()>();

        l1 = interfaceinvoke $stack11.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack13 = interfaceinvoke l1.<java.util.Iterator: boolean hasNext()>();

        if $stack13 == 0 goto label5;

        $stack14 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>();

        method = (soot.SootMethod) $stack14;

        $stack15 = "<init>";

        $stack16 = virtualinvoke method.<soot.SootMethod: java.lang.String getName()>();

        $stack17 = virtualinvoke $stack15.<java.lang.String: boolean equals(java.lang.Object)>($stack16);

        if $stack17 != 0 goto label4;

        $stack20 = <java.lang.System: java.io.PrintStream out>;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack21 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Method : ");

        $stack22 = virtualinvoke method.<soot.SootMethod: java.lang.String getName()>();

        $stack23 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack22);

        $stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $stack20.<java.io.PrintStream: void println(java.lang.String)>($stack24);

        $stack25 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack25.<java.io.PrintStream: void println(java.lang.String)>("==================");

        $stack26 = virtualinvoke method.<soot.SootMethod: soot.Body retrieveActiveBody()>();

        body = (soot.jimple.JimpleBody) $stack26;

        $u1 = new soot.toolkits.graph.TrapUnitGraph;

        $r0 = (soot.Body) body;

        specialinvoke $u1.<soot.toolkits.graph.TrapUnitGraph: void <init>(soot.Body)>($r0);

        g = $u1;

        $u2 = new pack.SimpleLiveVariablesAnalysis;

        $r1 = (soot.toolkits.graph.DirectedGraph) g;

        specialinvoke $u2.<pack.SimpleLiveVariablesAnalysis: void <init>(soot.toolkits.graph.DirectedGraph)>($r1);

        lva = $u2;

        $stack29 = virtualinvoke body.<soot.jimple.JimpleBody: soot.UnitPatchingChain getUnits()>();

        l6 = virtualinvoke $stack29.<soot.UnitPatchingChain: java.util.Iterator iterator()>();

     label2:
        $stack31 = interfaceinvoke l6.<java.util.Iterator: boolean hasNext()>();

        if $stack31 == 0 goto label3;

        $stack33 = interfaceinvoke l6.<java.util.Iterator: java.lang.Object next()>();

        unit = (soot.Unit) $stack33;

        $stack35 = <java.lang.System: java.io.PrintStream out>;

        $u3 = new java.lang.StringBuilder;

        specialinvoke $u3.<java.lang.StringBuilder: void <init>()>();

        $stack36 = virtualinvoke unit.<java.lang.Object: java.lang.String toString()>();

        $stack37 = virtualinvoke $u3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack36);

        $stack38 = virtualinvoke $stack37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[entry]");

        $stack39 = virtualinvoke lva.<pack.SimpleLiveVariablesAnalysis: java.lang.Object getFlowBefore(java.lang.Object)>(unit);

        $stack40 = virtualinvoke $stack38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack39);

        $stack41 = virtualinvoke $stack40.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $stack35.<java.io.PrintStream: void println(java.lang.String)>($stack41);

        $stack43 = <java.lang.System: java.io.PrintStream out>;

        $u4 = new java.lang.StringBuilder;

        specialinvoke $u4.<java.lang.StringBuilder: void <init>()>();

        $stack44 = virtualinvoke unit.<java.lang.Object: java.lang.String toString()>();

        $stack45 = virtualinvoke $u4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack44);

        $stack46 = virtualinvoke $stack45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[exit]");

        $stack47 = virtualinvoke lva.<pack.SimpleLiveVariablesAnalysis: java.lang.Object getFlowBefore(java.lang.Object)>(unit);

        $stack48 = virtualinvoke $stack46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack47);

        $stack49 = virtualinvoke $stack48.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $stack43.<java.io.PrintStream: void println(java.lang.String)>($stack49);

        goto label2;

     label3:
        $stack32 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack32.<java.io.PrintStream: void println(java.lang.String)>("==================");

     label4:
        goto label1;

     label5:
        return;
    }

    static void <clinit>()
    {
        <analysis.IntraAnalysis.LiveVariableProblem: java.lang.String className> = "Demo.LiveVariableExample";

        return;
    }
}
