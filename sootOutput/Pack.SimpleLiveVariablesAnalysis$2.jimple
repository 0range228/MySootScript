class Pack.SimpleLiveVariablesAnalysis$2 extends soot.jimple.AbstractJimpleValueSwitch
{
    final FlowSets.LiveVariableFlowSet val$destSet;
    final soot.ValueBox val$useBox;
    final Pack.SimpleLiveVariablesAnalysis this$0;

    void <init>(Pack.SimpleLiveVariablesAnalysis, FlowSets.LiveVariableFlowSet, soot.ValueBox)
    {
        Pack.SimpleLiveVariablesAnalysis$2 this;
        Pack.SimpleLiveVariablesAnalysis this$0;
        FlowSets.LiveVariableFlowSet l2;
        soot.ValueBox l3;

        this := @this: Pack.SimpleLiveVariablesAnalysis$2;

        this$0 := @parameter0: Pack.SimpleLiveVariablesAnalysis;

        l2 := @parameter1: FlowSets.LiveVariableFlowSet;

        l3 := @parameter2: soot.ValueBox;

        this.<Pack.SimpleLiveVariablesAnalysis$2: Pack.SimpleLiveVariablesAnalysis this$0> = this$0;

        this.<Pack.SimpleLiveVariablesAnalysis$2: FlowSets.LiveVariableFlowSet val$destSet> = l2;

        this.<Pack.SimpleLiveVariablesAnalysis$2: soot.ValueBox val$useBox> = l3;

        specialinvoke this.<soot.jimple.AbstractJimpleValueSwitch: void <init>()>();

        return;
    }

    public void caseLocal(soot.Local)
    {
        Pack.SimpleLiveVariablesAnalysis$2 this;
        soot.ValueBox $stack2;
        FlowSets.LiveVariableFlowSet $stack3;
        soot.Value $stack4;
        soot.Local $stack5, v;

        this := @this: Pack.SimpleLiveVariablesAnalysis$2;

        v := @parameter0: soot.Local;

        $stack3 = this.<Pack.SimpleLiveVariablesAnalysis$2: FlowSets.LiveVariableFlowSet val$destSet>;

        $stack2 = this.<Pack.SimpleLiveVariablesAnalysis$2: soot.ValueBox val$useBox>;

        $stack4 = interfaceinvoke $stack2.<soot.ValueBox: soot.Value getValue()>();

        $stack5 = (soot.Local) $stack4;

        virtualinvoke $stack3.<FlowSets.LiveVariableFlowSet: void add(soot.Local)>($stack5);

        return;
    }
}
