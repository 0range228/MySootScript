final class Basic.ParseExpr$3 extends soot.jimple.AbstractRefSwitch
{

    void <init>()
    {
        Basic.ParseExpr$3 this;

        this := @this: Basic.ParseExpr$3;

        specialinvoke this.<soot.jimple.AbstractRefSwitch: void <init>()>();

        return;
    }

    public void caseStaticFieldRef(soot.jimple.StaticFieldRef)
    {
        Basic.ParseExpr$3 this;
        soot.jimple.StaticFieldRef v;

        this := @this: Basic.ParseExpr$3;

        v := @parameter0: soot.jimple.StaticFieldRef;

        return;
    }

    public void caseInstanceFieldRef(soot.jimple.InstanceFieldRef)
    {
        soot.jimple.InstanceFieldRef v;
        soot.Value base;
        soot.SootField field;
        soot.SootFieldRef fieldRef;
        soot.Type fieldType;
        java.lang.StringBuilder $stack10, $stack12, $stack13, $stack14, $stack15, $stack16, $stack17, $stack18, $stack19;
        java.io.PrintStream $stack11;
        java.lang.String $stack20;
        Basic.ParseExpr$3 this;

        this := @this: Basic.ParseExpr$3;

        v := @parameter0: soot.jimple.InstanceFieldRef;

        base = interfaceinvoke v.<soot.jimple.InstanceFieldRef: soot.Value getBase()>();

        field = interfaceinvoke v.<soot.jimple.InstanceFieldRef: soot.SootField getField()>();

        fieldRef = interfaceinvoke v.<soot.jimple.InstanceFieldRef: soot.SootFieldRef getFieldRef()>();

        fieldType = interfaceinvoke v.<soot.jimple.InstanceFieldRef: soot.Type getType()>();

        $stack11 = <java.lang.System: java.io.PrintStream out>;

        $stack10 = new java.lang.StringBuilder;

        specialinvoke $stack10.<java.lang.StringBuilder: void <init>()>();

        $stack12 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("baseVar = ");

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(base);

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; field = ");

        $stack15 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(field);

        $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; fieldRef = ");

        $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(fieldRef);

        $stack18 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; fieldType = ");

        $stack19 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(fieldType);

        $stack20 = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $stack11.<java.io.PrintStream: void println(java.lang.String)>($stack20);

        return;
    }
}
