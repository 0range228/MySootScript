public class Basic.ParseMethodBody extends java.lang.Object
{
    private static java.lang.String className;
    private static final java.lang.String methodSubSignature;

    public void <init>()
    {
        Basic.ParseMethodBody this;

        this := @this: Basic.ParseMethodBody;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String $stack1;
        java.lang.String[] args;

        args := @parameter0: java.lang.String[];

        $stack1 = <Basic.ParseMethodBody: java.lang.String className>;

        staticinvoke <Config.SootConfig: void setupSoot(java.lang.String)>($stack1);

        staticinvoke <Basic.ParseMethodBody: void getMethodBodyInfo()>();

        return;
    }

    private static void myTest()
    {
        soot.Scene $stack5;
        java.lang.String $stack6, $stack18;
        soot.SootClass sc;
        soot.SootMethod areaMethod;
        soot.Body $stack9;
        soot.jimple.JimpleBody areaBody;
        soot.UnitPatchingChain $stack10;
        java.util.Iterator l3;
        boolean $stack12;
        java.lang.Object $stack13;
        soot.Unit unit;
        java.lang.StringBuilder $stack14, $stack16, $stack17;
        java.io.PrintStream $stack15;

        $stack5 = staticinvoke <soot.Scene: soot.Scene v()>();

        $stack6 = <Basic.ParseMethodBody: java.lang.String className>;

        sc = virtualinvoke $stack5.<soot.Scene: soot.SootClass getSootClass(java.lang.String)>($stack6);

        areaMethod = virtualinvoke sc.<soot.SootClass: soot.SootMethod getMethod(java.lang.String)>("int area(boolean)");

        $stack9 = virtualinvoke areaMethod.<soot.SootMethod: soot.Body retrieveActiveBody()>();

        areaBody = (soot.jimple.JimpleBody) $stack9;

        $stack10 = virtualinvoke areaBody.<soot.jimple.JimpleBody: soot.UnitPatchingChain getUnits()>();

        l3 = virtualinvoke $stack10.<soot.UnitPatchingChain: java.util.Iterator iterator()>();

     label1:
        $stack12 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $stack12 == 0 goto label2;

        $stack13 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        unit = (soot.Unit) $stack13;

        $stack15 = <java.lang.System: java.io.PrintStream out>;

        $stack14 = new java.lang.StringBuilder;

        specialinvoke $stack14.<java.lang.StringBuilder: void <init>()>();

        $stack16 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unit = ");

        $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(unit);

        $stack18 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $stack15.<java.io.PrintStream: void println(java.lang.String)>($stack18);

        goto label1;

     label2:
        return;
    }

    private static void getMethodBodyInfo()
    {
        soot.Scene $stack10;
        java.lang.String $stack11, $stack25, $stack29, $stack33, $stack37, $stack69;
        soot.SootClass sc;
        soot.SootMethod areaMethod;
        soot.Body $stack14;
        soot.jimple.JimpleBody areaBody;
        int localCount;
        soot.util.Chain locals, traps;
        soot.UnitPatchingChain units;
        soot.Local thisLocal, paramLocal;
        soot.Type thisType;
        java.lang.StringBuilder $stack22, $stack24, $stack26, $stack27, $stack28, $stack30, $stack31, $stack32, $stack34, $stack35, $stack36, $stack38, $stack39, $stack40, $stack41, $stack42, $stack43, $stack44, $stack45, $stack46, $stack47, $stack48, $stack49, $stack50, $stack51, $stack52, $stack53, $stack54, $stack55, $stack56, $stack57, $stack58, $stack59, $stack60, $stack61, $stack62, $stack63, $stack64, $stack65, $stack66, $stack67, $stack68;
        java.io.PrintStream $stack23;

        $stack10 = staticinvoke <soot.Scene: soot.Scene v()>();

        $stack11 = <Basic.ParseMethodBody: java.lang.String className>;

        sc = virtualinvoke $stack10.<soot.Scene: soot.SootClass getSootClass(java.lang.String)>($stack11);

        areaMethod = virtualinvoke sc.<soot.SootClass: soot.SootMethod getMethod(java.lang.String)>("int area(boolean)");

        $stack14 = virtualinvoke areaMethod.<soot.SootMethod: soot.Body retrieveActiveBody()>();

        areaBody = (soot.jimple.JimpleBody) $stack14;

        localCount = virtualinvoke areaBody.<soot.jimple.JimpleBody: int getLocalCount()>();

        locals = virtualinvoke areaBody.<soot.jimple.JimpleBody: soot.util.Chain getLocals()>();

        units = virtualinvoke areaBody.<soot.jimple.JimpleBody: soot.UnitPatchingChain getUnits()>();

        traps = virtualinvoke areaBody.<soot.jimple.JimpleBody: soot.util.Chain getTraps()>();

        thisLocal = virtualinvoke areaBody.<soot.jimple.JimpleBody: soot.Local getThisLocal()>();

        thisType = interfaceinvoke thisLocal.<soot.Local: soot.Type getType()>();

        paramLocal = virtualinvoke areaBody.<soot.jimple.JimpleBody: soot.Local getParameterLocal(int)>(0);

        $stack23 = <java.lang.System: java.io.PrintStream out>;

        $stack22 = new java.lang.StringBuilder;

        specialinvoke $stack22.<java.lang.StringBuilder: void <init>()>();

        $stack24 = virtualinvoke $stack22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[class name] = ");

        $stack25 = virtualinvoke sc.<soot.SootClass: java.lang.String getName()>();

        $stack26 = virtualinvoke $stack24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack25);

        $stack27 = virtualinvoke $stack26.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $stack28 = virtualinvoke $stack27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[method name] = ");

        $stack29 = virtualinvoke areaMethod.<soot.SootMethod: java.lang.String getName()>();

        $stack30 = virtualinvoke $stack28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack29);

        $stack31 = virtualinvoke $stack30.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $stack32 = virtualinvoke $stack31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[method signature] = ");

        $stack33 = virtualinvoke areaMethod.<soot.SootMethod: java.lang.String getSignature()>();

        $stack34 = virtualinvoke $stack32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack33);

        $stack35 = virtualinvoke $stack34.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $stack36 = virtualinvoke $stack35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[method signature] = ");

        $stack37 = virtualinvoke areaMethod.<soot.SootMethod: java.lang.String getSubSignature()>();

        $stack38 = virtualinvoke $stack36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack37);

        $stack39 = virtualinvoke $stack38.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $stack40 = virtualinvoke $stack39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("--------------------------------------");

        $stack41 = virtualinvoke $stack40.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $stack42 = virtualinvoke $stack41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[locals count] = ");

        $stack43 = virtualinvoke $stack42.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(localCount);

        $stack44 = virtualinvoke $stack43.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $stack45 = virtualinvoke $stack44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[local  list] = ");

        $stack46 = virtualinvoke $stack45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(locals);

        $stack47 = virtualinvoke $stack46.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $stack48 = virtualinvoke $stack47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("--------------------------------------");

        $stack49 = virtualinvoke $stack48.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $stack50 = virtualinvoke $stack49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[unit list] = ");

        $stack51 = virtualinvoke $stack50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(units);

        $stack52 = virtualinvoke $stack51.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $stack53 = virtualinvoke $stack52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("--------------------------------------");

        $stack54 = virtualinvoke $stack53.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $stack55 = virtualinvoke $stack54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[exception] = ");

        $stack56 = virtualinvoke $stack55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(traps);

        $stack57 = virtualinvoke $stack56.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $stack58 = virtualinvoke $stack57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("--------------------------------------");

        $stack59 = virtualinvoke $stack58.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $stack60 = virtualinvoke $stack59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[this] = ");

        $stack61 = virtualinvoke $stack60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(thisLocal);

        $stack62 = virtualinvoke $stack61.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $stack63 = virtualinvoke $stack62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[this type] = ");

        $stack64 = virtualinvoke $stack63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(thisType);

        $stack65 = virtualinvoke $stack64.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $stack66 = virtualinvoke $stack65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[0th local] = ");

        $stack67 = virtualinvoke $stack66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(paramLocal);

        $stack68 = virtualinvoke $stack67.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $stack69 = virtualinvoke $stack68.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $stack23.<java.io.PrintStream: void print(java.lang.String)>($stack69);

        return;
    }

    static void <clinit>()
    {
        <Basic.ParseMethodBody: java.lang.String methodSubSignature> = "int area(boolean)";

        <Basic.ParseMethodBody: java.lang.String className> = "Demo.Circle";

        return;
    }
}
