public class Basic.ParseExpr extends java.lang.Object
{
    private static java.lang.String className;
    private static final java.lang.String methodSubSignature;

    public void <init>()
    {
        Basic.ParseExpr r0;

        r0 := @this: Basic.ParseExpr;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String $r0;
        java.lang.String[] r1;

        r1 := @parameter0: java.lang.String[];

        $r0 = <Basic.ParseExpr: java.lang.String className>;

        staticinvoke <Config.SootConfig: void setupSoot(java.lang.String)>($r0);

        staticinvoke <Basic.ParseExpr: void getExprInfo()>();

        return;
    }

    public static void getExprInfo()
    {
        soot.Scene $r0;
        java.lang.String $r1, $r19, $r28;
        soot.SootClass r2;
        soot.SootMethod r3;
        soot.Body $r4;
        soot.jimple.JimpleBody r5;
        soot.jimple.Stmt r6, r11;
        soot.UnitPatchingChain $r7;
        java.util.Iterator r8;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object $r9;
        soot.Unit r10;
        java.io.PrintStream $r15, $r21, $r23, $r29;
        int $i0, $i1;
        java.lang.StringBuilder $r16, $r17, $r18, $r24, $r25, $r26, $r27, $r32, $r33;
        soot.jimple.InvokeExpr r30;
        soot.jimple.FieldRef r31;
        Basic.ParseExpr$1 $r34;
        Basic.ParseExpr$2 $r35;
        Basic.ParseExpr$3 $r36;
        soot.util.Switch $r37, $r38, $r39;

        $r0 = staticinvoke <soot.Scene: soot.Scene v()>();

        $r1 = <Basic.ParseExpr: java.lang.String className>;

        r2 = virtualinvoke $r0.<soot.Scene: soot.SootClass getSootClass(java.lang.String)>($r1);

        r3 = virtualinvoke r2.<soot.SootClass: soot.SootMethod getMethod(java.lang.String)>("int area(boolean)");

        $r4 = virtualinvoke r3.<soot.SootMethod: soot.Body retrieveActiveBody()>();

        r5 = (soot.jimple.JimpleBody) $r4;

        r6 = virtualinvoke r5.<soot.jimple.JimpleBody: soot.jimple.Stmt getFirstNonIdentityStmt()>();

        $r7 = virtualinvoke r5.<soot.jimple.JimpleBody: soot.UnitPatchingChain getUnits()>();

        r8 = virtualinvoke $r7.<soot.UnitPatchingChain: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r9 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (soot.Unit) $r9;

        r11 = (soot.jimple.Stmt) r10;

        $z1 = virtualinvoke r11.<java.lang.Object: boolean equals(java.lang.Object)>(r6);

        if $z1 == 0 goto label2;

        $r23 = <java.lang.System: java.io.PrintStream out>;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("First invoke expr : \n");

        $i1 = interfaceinvoke r11.<soot.jimple.Stmt: int getJavaSourceStartLineNumber()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" : ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r11);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r23.<java.io.PrintStream: void println(java.lang.String)>($r28);

        $r29 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r29.<java.io.PrintStream: void println(java.lang.String)>("-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-");

     label2:
        $z2 = interfaceinvoke r11.<soot.jimple.Stmt: boolean containsInvokeExpr()>();

        if $z2 == 0 goto label3;

        $r15 = <java.lang.System: java.io.PrintStream out>;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $i0 = interfaceinvoke r11.<soot.jimple.Stmt: int getJavaSourceStartLineNumber()>();

        $r16 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" : ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r11);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>($r19);

        r30 = interfaceinvoke r11.<soot.jimple.Stmt: soot.jimple.InvokeExpr getInvokeExpr()>();

        $r34 = new Basic.ParseExpr$1;

        specialinvoke $r34.<Basic.ParseExpr$1: void <init>()>();

        $r37 = (soot.util.Switch) $r34;

        interfaceinvoke r30.<soot.jimple.InvokeExpr: void apply(soot.util.Switch)>($r37);

        $r21 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r21.<java.io.PrintStream: void println(java.lang.String)>("-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-");

     label3:
        $r35 = new Basic.ParseExpr$2;

        specialinvoke $r35.<Basic.ParseExpr$2: void <init>(soot.jimple.JimpleBody)>(r5);

        $r38 = (soot.util.Switch) $r35;

        interfaceinvoke r11.<soot.jimple.Stmt: void apply(soot.util.Switch)>($r38);

        $z3 = interfaceinvoke r11.<soot.jimple.Stmt: boolean containsFieldRef()>();

        if $z3 == 0 goto label4;

        r31 = interfaceinvoke r11.<soot.jimple.Stmt: soot.jimple.FieldRef getFieldRef()>();

        $r36 = new Basic.ParseExpr$3;

        specialinvoke $r36.<Basic.ParseExpr$3: void <init>()>();

        $r39 = (soot.util.Switch) $r36;

        interfaceinvoke r31.<soot.jimple.FieldRef: void apply(soot.util.Switch)>($r39);

     label4:
        goto label1;

     label5:
        return;
    }

    static void <clinit>()
    {
        <Basic.ParseExpr: java.lang.String methodSubSignature> = "int area(boolean)";

        <Basic.ParseExpr: java.lang.String className> = "Demo.Circle";

        return;
    }
}
