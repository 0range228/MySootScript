public class analysis.interAnalysis.FindMethodCaller extends java.lang.Object
{
    public static final java.lang.String className;

    public void <init>()
    {
        analysis.interAnalysis.FindMethodCaller this;

        this := @this: analysis.interAnalysis.FindMethodCaller;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public static void main(java.lang.String[]) throws java.lang.Exception
    {
        java.lang.String[] args;

        args := @parameter0: java.lang.String[];

        staticinvoke <config.SootConfig: void setupSoot(java.lang.String)>("Demo.AnalysisExample");

        staticinvoke <analysis.interAnalysis.FindMethodCaller: void findMCaller()>();

        return;
    }

    public static void findMCaller()
    {
        soot.Scene $stack11;
        soot.SootClass sc;
        soot.SootMethod method, m, $stack53;
        java.io.PrintStream $stack15, $stack35, $stack37, $stack49, $stack57, $stack62;
        java.lang.StringBuilder $stack16, $stack18, $stack19, $stack21, $stack22, $stack39, $stack40, $stack42, $stack50, $stack51, $stack58, $stack59, $stack63, $stack64, $u0, $u2, $u3, $u4, $u5;
        java.lang.String $stack17, $stack20, $stack23, $stack41, $stack43, $stack52, $stack60, $stack65;
        java.util.List $stack24, args;
        java.util.Iterator l2, l6;
        boolean $stack26, $stack32, $stack45, $stack69;
        java.lang.Object $stack27, $stack46, $stack68;
        java.util.ArrayList stmtList, $u1;
        soot.Body $stack29;
        soot.jimple.JimpleBody body;
        soot.UnitPatchingChain $stack30;
        int $stack33, $stack38, parameterCount;
        soot.Unit unit, $r0;
        soot.jimple.Stmt stmt, unit#5;
        soot.jimple.InvokeExpr stmt#6;
        analysis.interAnalysis.FindMethodCaller$1 $u6;
        soot.util.Switch $r1;

        $stack11 = staticinvoke <soot.Scene: soot.Scene v()>();

        sc = virtualinvoke $stack11.<soot.Scene: soot.SootClass getSootClass(java.lang.String)>("Demo.AnalysisExample");

        method = virtualinvoke sc.<soot.SootClass: soot.SootMethod getMethod(java.lang.String)>("void methodC(java.lang.String)");

        $stack15 = <java.lang.System: java.io.PrintStream out>;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack16 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Analysis the method [");

        $stack17 = virtualinvoke method.<soot.SootMethod: java.lang.String getName()>();

        $stack18 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack17);

        $stack19 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] from class {");

        $stack20 = virtualinvoke sc.<soot.SootClass: java.lang.String getName()>();

        $stack21 = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack20);

        $stack22 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        $stack23 = virtualinvoke $stack22.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $stack15.<java.io.PrintStream: void println(java.lang.String)>($stack23);

        $stack24 = virtualinvoke sc.<soot.SootClass: java.util.List getMethods()>();

        l2 = interfaceinvoke $stack24.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack26 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>();

        if $stack26 == 0 goto label7;

        $stack27 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        m = (soot.SootMethod) $stack27;

        $u1 = new java.util.ArrayList;

        specialinvoke $u1.<java.util.ArrayList: void <init>()>();

        stmtList = $u1;

        $stack29 = virtualinvoke m.<soot.SootMethod: soot.Body retrieveActiveBody()>();

        body = (soot.jimple.JimpleBody) $stack29;

        $stack30 = virtualinvoke body.<soot.jimple.JimpleBody: soot.UnitPatchingChain getUnits()>();

        l6 = virtualinvoke $stack30.<soot.UnitPatchingChain: java.util.Iterator iterator()>();

     label2:
        $stack32 = interfaceinvoke l6.<java.util.Iterator: boolean hasNext()>();

        if $stack32 == 0 goto label4;

        $stack68 = interfaceinvoke l6.<java.util.Iterator: java.lang.Object next()>();

        unit = (soot.Unit) $stack68;

        stmt = (soot.jimple.Stmt) unit;

        $r0 = (soot.Unit) stmt;

        $stack69 = staticinvoke <analysis.interAnalysis.FindMethodCaller: boolean doesinvoke(soot.Unit,soot.SootMethod)>($r0, method);

        if $stack69 == 0 goto label3;

        interfaceinvoke stmtList.<java.util.List: boolean add(java.lang.Object)>(stmt);

     label3:
        goto label2;

     label4:
        $stack33 = interfaceinvoke stmtList.<java.util.List: int size()>();

        if $stack33 <= 0 goto label6;

        $stack35 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $stack35.<java.io.PrintStream: void println(java.lang.String)>("============================");

        $stack37 = <java.lang.System: java.io.PrintStream out>;

        $u2 = new java.lang.StringBuilder;

        specialinvoke $u2.<java.lang.StringBuilder: void <init>()>();

        $stack38 = interfaceinvoke stmtList.<java.util.List: int size()>();

        $stack39 = virtualinvoke $u2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack38);

        $stack40 = virtualinvoke $stack39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Usage(s) found in the method ");

        $stack41 = virtualinvoke m.<soot.SootMethod: java.lang.String getSignature()>();

        $stack42 = virtualinvoke $stack40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack41);

        $stack43 = virtualinvoke $stack42.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $stack37.<java.io.PrintStream: void println(java.lang.String)>($stack43);

        l6 = interfaceinvoke stmtList.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $stack45 = interfaceinvoke l6.<java.util.Iterator: boolean hasNext()>();

        if $stack45 == 0 goto label6;

        $stack46 = interfaceinvoke l6.<java.util.Iterator: java.lang.Object next()>();

        unit#5 = (soot.jimple.Stmt) $stack46;

        stmt#6 = interfaceinvoke unit#5.<soot.jimple.Stmt: soot.jimple.InvokeExpr getInvokeExpr()>();

        $stack49 = <java.lang.System: java.io.PrintStream out>;

        $u3 = new java.lang.StringBuilder;

        specialinvoke $u3.<java.lang.StringBuilder: void <init>()>();

        $stack50 = virtualinvoke $u3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invokeExpr = ");

        $stack51 = virtualinvoke $stack50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(stmt#6);

        $stack52 = virtualinvoke $stack51.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $stack49.<java.io.PrintStream: void println(java.lang.String)>($stack52);

        $stack53 = interfaceinvoke stmt#6.<soot.jimple.InvokeExpr: soot.SootMethod getMethod()>();

        parameterCount = virtualinvoke $stack53.<soot.SootMethod: int getParameterCount()>();

        args = interfaceinvoke stmt#6.<soot.jimple.InvokeExpr: java.util.List getArgs()>();

        $stack57 = <java.lang.System: java.io.PrintStream out>;

        $u4 = new java.lang.StringBuilder;

        specialinvoke $u4.<java.lang.StringBuilder: void <init>()>();

        $stack58 = virtualinvoke $u4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("args count = ");

        $stack59 = virtualinvoke $stack58.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(parameterCount);

        $stack60 = virtualinvoke $stack59.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $stack57.<java.io.PrintStream: void println(java.lang.String)>($stack60);

        $stack62 = <java.lang.System: java.io.PrintStream out>;

        $u5 = new java.lang.StringBuilder;

        specialinvoke $u5.<java.lang.StringBuilder: void <init>()>();

        $stack63 = virtualinvoke $u5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("args = ");

        $stack64 = virtualinvoke $stack63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(args);

        $stack65 = virtualinvoke $stack64.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $stack62.<java.io.PrintStream: void println(java.lang.String)>($stack65);

        $u6 = new analysis.interAnalysis.FindMethodCaller$1;

        specialinvoke $u6.<analysis.interAnalysis.FindMethodCaller$1: void <init>()>();

        $r1 = (soot.util.Switch) $u6;

        interfaceinvoke stmt#6.<soot.jimple.InvokeExpr: void apply(soot.util.Switch)>($r1);

        goto label5;

     label6:
        goto label1;

     label7:
        return;
    }

    public static boolean doesinvoke(soot.Unit, soot.SootMethod)
    {
        java.util.concurrent.atomic.AtomicBoolean result, $u0;
        soot.Unit u;
        soot.SootMethod method;
        boolean $stack5;
        analysis.interAnalysis.FindMethodCaller$2 $u1;
        soot.util.Switch $r0;

        u := @parameter0: soot.Unit;

        method := @parameter1: soot.SootMethod;

        $u0 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $u0.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        result = $u0;

        $u1 = new analysis.interAnalysis.FindMethodCaller$2;

        specialinvoke $u1.<analysis.interAnalysis.FindMethodCaller$2: void <init>(soot.SootMethod,java.util.concurrent.atomic.AtomicBoolean)>(method, result);

        $r0 = (soot.util.Switch) $u1;

        interfaceinvoke u.<soot.Unit: void apply(soot.util.Switch)>($r0);

        $stack5 = virtualinvoke result.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        return $stack5;
    }

    public static void <clinit>()
    {
        <analysis.interAnalysis.FindMethodCaller: java.lang.String className> = "Demo.AnalysisExample";

        return;
    }
}
