class pack.ReachingDefinationsAnalysis$2 extends soot.jimple.AbstractJimpleValueSwitch
{
    final soot.toolkits.scalar.FlowSet val$destSet;
    final soot.ValueBox val$defBox;
    final pack.ReachingDefinationsAnalysis this$0;

    void <init>(pack.ReachingDefinationsAnalysis, soot.toolkits.scalar.FlowSet, soot.ValueBox)
    {
        pack.ReachingDefinationsAnalysis$2 this;
        pack.ReachingDefinationsAnalysis this$0;
        soot.toolkits.scalar.FlowSet l2;
        soot.ValueBox l3;

        this := @this: pack.ReachingDefinationsAnalysis$2;

        this$0 := @parameter0: pack.ReachingDefinationsAnalysis;

        l2 := @parameter1: soot.toolkits.scalar.FlowSet;

        l3 := @parameter2: soot.ValueBox;

        this.<pack.ReachingDefinationsAnalysis$2: pack.ReachingDefinationsAnalysis this$0> = this$0;

        this.<pack.ReachingDefinationsAnalysis$2: soot.toolkits.scalar.FlowSet val$destSet> = l2;

        this.<pack.ReachingDefinationsAnalysis$2: soot.ValueBox val$defBox> = l3;

        specialinvoke this.<soot.jimple.AbstractJimpleValueSwitch: void <init>()>();

        return;
    }

    public void caseLocal(soot.Local)
    {
        pack.ReachingDefinationsAnalysis$2 this;
        soot.ValueBox $stack2;
        soot.toolkits.scalar.FlowSet $stack3;
        soot.Value $stack4;
        soot.Local v;

        this := @this: pack.ReachingDefinationsAnalysis$2;

        v := @parameter0: soot.Local;

        $stack3 = this.<pack.ReachingDefinationsAnalysis$2: soot.toolkits.scalar.FlowSet val$destSet>;

        $stack2 = this.<pack.ReachingDefinationsAnalysis$2: soot.ValueBox val$defBox>;

        $stack4 = interfaceinvoke $stack2.<soot.ValueBox: soot.Value getValue()>();

        interfaceinvoke $stack3.<soot.toolkits.scalar.FlowSet: void add(java.lang.Object)>($stack4);

        return;
    }
}
