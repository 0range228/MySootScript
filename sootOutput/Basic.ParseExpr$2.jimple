final class Basic.ParseExpr$2 extends soot.jimple.AbstractStmtSwitch
{
    final soot.jimple.JimpleBody val$areaBody;

    void <init>(soot.jimple.JimpleBody)
    {
        Basic.ParseExpr$2 r0;
        soot.jimple.JimpleBody r1;

        r0 := @this: Basic.ParseExpr$2;

        r1 := @parameter0: soot.jimple.JimpleBody;

        r0.<Basic.ParseExpr$2: soot.jimple.JimpleBody val$areaBody> = r1;

        specialinvoke r0.<soot.jimple.AbstractStmtSwitch: void <init>()>();

        return;
    }

    public void caseIfStmt(soot.jimple.IfStmt)
    {
        soot.jimple.IfStmt r0;
        java.io.PrintStream $r1, $r3, $r12;
        java.lang.Object[] $r2, $r11;
        soot.Value $r4, $r13;
        soot.jimple.Stmt $r5, $r14;
        Basic.ParseExpr$2 r7;
        soot.jimple.JimpleBody $r8;
        soot.UnitPatchingChain $r9;
        soot.Unit $r10, $r16;

        r7 := @this: Basic.ParseExpr$2;

        r0 := @parameter0: soot.jimple.IfStmt;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.Object)>(r0);

        $r3 = <java.lang.System: java.io.PrintStream out>;

        $r2 = newarray (java.lang.Object)[2];

        $r4 = interfaceinvoke r0.<soot.jimple.IfStmt: soot.Value getCondition()>();

        $r2[0] = $r4;

        $r5 = interfaceinvoke r0.<soot.jimple.IfStmt: soot.jimple.Stmt getTarget()>();

        $r2[1] = $r5;

        virtualinvoke $r3.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>("[Before change] if condition \'%s\' is true goes to stmt \'%s\'%n", $r2);

        $r8 = r7.<Basic.ParseExpr$2: soot.jimple.JimpleBody val$areaBody>;

        $r9 = virtualinvoke $r8.<soot.jimple.JimpleBody: soot.UnitPatchingChain getUnits()>();

        $r16 = (soot.Unit) r0;

        $r10 = virtualinvoke $r9.<soot.UnitPatchingChain: soot.Unit getSuccOf(soot.Unit)>($r16);

        interfaceinvoke r0.<soot.jimple.IfStmt: void setTarget(soot.Unit)>($r10);

        $r12 = <java.lang.System: java.io.PrintStream out>;

        $r11 = newarray (java.lang.Object)[2];

        $r13 = interfaceinvoke r0.<soot.jimple.IfStmt: soot.Value getCondition()>();

        $r11[0] = $r13;

        $r14 = interfaceinvoke r0.<soot.jimple.IfStmt: soot.jimple.Stmt getTarget()>();

        $r11[1] = $r14;

        virtualinvoke $r12.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>("[After change] if condition \'%s\' is true goes to stmt \'%s\'%n", $r11);

        return;
    }
}
