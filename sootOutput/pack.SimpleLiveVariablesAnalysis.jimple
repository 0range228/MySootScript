public class pack.SimpleLiveVariablesAnalysis extends soot.toolkits.scalar.BackwardFlowAnalysis
{
    private flowsets.LiveVariableFlowSet emptySet;

    public void <init>(soot.toolkits.graph.DirectedGraph)
    {
        pack.SimpleLiveVariablesAnalysis this;
        soot.toolkits.graph.DirectedGraph graph;

        this := @this: pack.SimpleLiveVariablesAnalysis;

        graph := @parameter0: soot.toolkits.graph.DirectedGraph;

        specialinvoke this.<soot.toolkits.scalar.BackwardFlowAnalysis: void <init>(soot.toolkits.graph.DirectedGraph)>(graph);

        virtualinvoke this.<pack.SimpleLiveVariablesAnalysis: void doAnalysis()>();

        return;
    }

    protected flowsets.LiveVariableFlowSet newInitialFlow()
    {
        flowsets.LiveVariableFlowSet $stack1;
        pack.SimpleLiveVariablesAnalysis this;

        this := @this: pack.SimpleLiveVariablesAnalysis;

        $stack1 = new flowsets.LiveVariableFlowSet;

        specialinvoke $stack1.<flowsets.LiveVariableFlowSet: void <init>()>();

        return $stack1;
    }

    protected flowsets.LiveVariableFlowSet entryInitialFlow()
    {
        flowsets.LiveVariableFlowSet $stack1;
        pack.SimpleLiveVariablesAnalysis this;

        this := @this: pack.SimpleLiveVariablesAnalysis;

        $stack1 = new flowsets.LiveVariableFlowSet;

        specialinvoke $stack1.<flowsets.LiveVariableFlowSet: void <init>()>();

        return $stack1;
    }

    protected void merge(flowsets.LiveVariableFlowSet, flowsets.LiveVariableFlowSet, flowsets.LiveVariableFlowSet)
    {
        flowsets.LiveVariableFlowSet srcSet1, srcSet2, destSet;
        pack.SimpleLiveVariablesAnalysis this;
        soot.toolkits.scalar.FlowSet $r0, $r1;

        this := @this: pack.SimpleLiveVariablesAnalysis;

        srcSet1 := @parameter0: flowsets.LiveVariableFlowSet;

        srcSet2 := @parameter1: flowsets.LiveVariableFlowSet;

        destSet := @parameter2: flowsets.LiveVariableFlowSet;

        $r0 = (soot.toolkits.scalar.FlowSet) srcSet2;

        $r1 = (soot.toolkits.scalar.FlowSet) srcSet2;

        virtualinvoke srcSet1.<flowsets.LiveVariableFlowSet: void union(soot.toolkits.scalar.FlowSet,soot.toolkits.scalar.FlowSet)>($r0, $r1);

        return;
    }

    protected void copy(flowsets.LiveVariableFlowSet, flowsets.LiveVariableFlowSet)
    {
        flowsets.LiveVariableFlowSet srcSet, destSet;
        pack.SimpleLiveVariablesAnalysis this;
        soot.toolkits.scalar.FlowSet $r0;

        this := @this: pack.SimpleLiveVariablesAnalysis;

        srcSet := @parameter0: flowsets.LiveVariableFlowSet;

        destSet := @parameter1: flowsets.LiveVariableFlowSet;

        $r0 = (soot.toolkits.scalar.FlowSet) destSet;

        virtualinvoke srcSet.<flowsets.LiveVariableFlowSet: void copy(soot.toolkits.scalar.FlowSet)>($r0);

        return;
    }

    protected void flowThrough(flowsets.LiveVariableFlowSet, soot.Unit, flowsets.LiveVariableFlowSet)
    {
        pack.SimpleLiveVariablesAnalysis this;
        flowsets.LiveVariableFlowSet srcSet, destSet;
        soot.Unit u;

        this := @this: pack.SimpleLiveVariablesAnalysis;

        srcSet := @parameter0: flowsets.LiveVariableFlowSet;

        u := @parameter1: soot.Unit;

        destSet := @parameter2: flowsets.LiveVariableFlowSet;

        specialinvoke this.<pack.SimpleLiveVariablesAnalysis: void kill(flowsets.LiveVariableFlowSet,soot.Unit,flowsets.LiveVariableFlowSet)>(srcSet, u, destSet);

        specialinvoke this.<pack.SimpleLiveVariablesAnalysis: void gen(soot.Unit,flowsets.LiveVariableFlowSet)>(u, destSet);

        return;
    }

    private void kill(flowsets.LiveVariableFlowSet, soot.Unit, flowsets.LiveVariableFlowSet)
    {
        flowsets.LiveVariableFlowSet kills, inSet, destSet, $u0;
        soot.Unit u;
        java.util.List $stack8;
        java.util.Iterator defIt;
        boolean $stack10;
        java.lang.Object $stack11;
        soot.ValueBox defBox;
        soot.Value $stack12;
        pack.SimpleLiveVariablesAnalysis this;
        pack.SimpleLiveVariablesAnalysis$1 $u1;
        soot.util.Switch $r0;
        soot.toolkits.scalar.FlowSet $r1, $r2;

        this := @this: pack.SimpleLiveVariablesAnalysis;

        inSet := @parameter0: flowsets.LiveVariableFlowSet;

        u := @parameter1: soot.Unit;

        destSet := @parameter2: flowsets.LiveVariableFlowSet;

        $u0 = new flowsets.LiveVariableFlowSet;

        specialinvoke $u0.<flowsets.LiveVariableFlowSet: void <init>()>();

        kills = $u0;

        $stack8 = interfaceinvoke u.<soot.Unit: java.util.List getDefBoxes()>();

        defIt = interfaceinvoke $stack8.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack10 = interfaceinvoke defIt.<java.util.Iterator: boolean hasNext()>();

        if $stack10 == 0 goto label2;

        $stack11 = interfaceinvoke defIt.<java.util.Iterator: java.lang.Object next()>();

        defBox = (soot.ValueBox) $stack11;

        $stack12 = interfaceinvoke defBox.<soot.ValueBox: soot.Value getValue()>();

        $u1 = new pack.SimpleLiveVariablesAnalysis$1;

        specialinvoke $u1.<pack.SimpleLiveVariablesAnalysis$1: void <init>(pack.SimpleLiveVariablesAnalysis,flowsets.LiveVariableFlowSet,soot.ValueBox,flowsets.LiveVariableFlowSet)>(this, inSet, defBox, kills);

        $r0 = (soot.util.Switch) $u1;

        interfaceinvoke $stack12.<soot.Value: void apply(soot.util.Switch)>($r0);

        goto label1;

     label2:
        $r1 = (soot.toolkits.scalar.FlowSet) kills;

        $r2 = (soot.toolkits.scalar.FlowSet) destSet;

        virtualinvoke inSet.<flowsets.LiveVariableFlowSet: void difference(soot.toolkits.scalar.FlowSet,soot.toolkits.scalar.FlowSet)>($r1, $r2);

        return;
    }

    private void gen(soot.Unit, flowsets.LiveVariableFlowSet)
    {
        soot.Unit u;
        java.util.List $stack5;
        java.util.Iterator it;
        boolean $stack7;
        java.lang.Object $stack8;
        soot.ValueBox useBox;
        soot.Value $stack9;
        pack.SimpleLiveVariablesAnalysis this;
        flowsets.LiveVariableFlowSet destSet;
        pack.SimpleLiveVariablesAnalysis$2 $u0;
        soot.util.Switch $r0;

        this := @this: pack.SimpleLiveVariablesAnalysis;

        u := @parameter0: soot.Unit;

        destSet := @parameter1: flowsets.LiveVariableFlowSet;

        $stack5 = interfaceinvoke u.<soot.Unit: java.util.List getUseBoxes()>();

        it = interfaceinvoke $stack5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack7 = interfaceinvoke it.<java.util.Iterator: boolean hasNext()>();

        if $stack7 == 0 goto label2;

        $stack8 = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>();

        useBox = (soot.ValueBox) $stack8;

        $stack9 = interfaceinvoke useBox.<soot.ValueBox: soot.Value getValue()>();

        $u0 = new pack.SimpleLiveVariablesAnalysis$2;

        specialinvoke $u0.<pack.SimpleLiveVariablesAnalysis$2: void <init>(pack.SimpleLiveVariablesAnalysis,flowsets.LiveVariableFlowSet,soot.ValueBox)>(this, destSet, useBox);

        $r0 = (soot.util.Switch) $u0;

        interfaceinvoke $stack9.<soot.Value: void apply(soot.util.Switch)>($r0);

        goto label1;

     label2:
        return;
    }

    protected volatile void flowThrough(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        pack.SimpleLiveVariablesAnalysis this;
        java.lang.Object l1, l2, l3;
        flowsets.LiveVariableFlowSet $stack4, $stack6;
        soot.Unit $stack5;

        this := @this: pack.SimpleLiveVariablesAnalysis;

        l1 := @parameter0: java.lang.Object;

        l2 := @parameter1: java.lang.Object;

        l3 := @parameter2: java.lang.Object;

        $stack6 = (flowsets.LiveVariableFlowSet) l1;

        $stack5 = (soot.Unit) l2;

        $stack4 = (flowsets.LiveVariableFlowSet) l3;

        virtualinvoke this.<pack.SimpleLiveVariablesAnalysis: void flowThrough(flowsets.LiveVariableFlowSet,soot.Unit,flowsets.LiveVariableFlowSet)>($stack6, $stack5, $stack4);

        return;
    }

    protected volatile void copy(java.lang.Object, java.lang.Object)
    {
        pack.SimpleLiveVariablesAnalysis this;
        java.lang.Object l1, l2;
        flowsets.LiveVariableFlowSet $stack3, $stack4;

        this := @this: pack.SimpleLiveVariablesAnalysis;

        l1 := @parameter0: java.lang.Object;

        l2 := @parameter1: java.lang.Object;

        $stack4 = (flowsets.LiveVariableFlowSet) l1;

        $stack3 = (flowsets.LiveVariableFlowSet) l2;

        virtualinvoke this.<pack.SimpleLiveVariablesAnalysis: void copy(flowsets.LiveVariableFlowSet,flowsets.LiveVariableFlowSet)>($stack4, $stack3);

        return;
    }

    protected volatile void merge(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        pack.SimpleLiveVariablesAnalysis this;
        java.lang.Object l1, l2, l3;
        flowsets.LiveVariableFlowSet $stack4, $stack5, $stack6;

        this := @this: pack.SimpleLiveVariablesAnalysis;

        l1 := @parameter0: java.lang.Object;

        l2 := @parameter1: java.lang.Object;

        l3 := @parameter2: java.lang.Object;

        $stack6 = (flowsets.LiveVariableFlowSet) l1;

        $stack5 = (flowsets.LiveVariableFlowSet) l2;

        $stack4 = (flowsets.LiveVariableFlowSet) l3;

        virtualinvoke this.<pack.SimpleLiveVariablesAnalysis: void merge(flowsets.LiveVariableFlowSet,flowsets.LiveVariableFlowSet,flowsets.LiveVariableFlowSet)>($stack6, $stack5, $stack4);

        return;
    }

    protected volatile java.lang.Object entryInitialFlow()
    {
        pack.SimpleLiveVariablesAnalysis this;
        flowsets.LiveVariableFlowSet $stack1;

        this := @this: pack.SimpleLiveVariablesAnalysis;

        $stack1 = virtualinvoke this.<pack.SimpleLiveVariablesAnalysis: flowsets.LiveVariableFlowSet entryInitialFlow()>();

        return $stack1;
    }

    protected volatile java.lang.Object newInitialFlow()
    {
        pack.SimpleLiveVariablesAnalysis this;
        flowsets.LiveVariableFlowSet $stack1;

        this := @this: pack.SimpleLiveVariablesAnalysis;

        $stack1 = virtualinvoke this.<pack.SimpleLiveVariablesAnalysis: flowsets.LiveVariableFlowSet newInitialFlow()>();

        return $stack1;
    }
}
