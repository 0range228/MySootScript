final class graph.BuildCallGraph$1 extends soot.jimple.AbstractExprSwitch
{
    final java.util.List val$targetMethodsList;
    final java.lang.String val$signature;

    void <init>(java.util.List, java.lang.String)
    {
        graph.BuildCallGraph$1 this;
        java.util.List l1;
        java.lang.String l2;

        this := @this: graph.BuildCallGraph$1;

        l1 := @parameter0: java.util.List;

        l2 := @parameter1: java.lang.String;

        this.<graph.BuildCallGraph$1: java.util.List val$targetMethodsList> = l1;

        this.<graph.BuildCallGraph$1: java.lang.String val$signature> = l2;

        specialinvoke this.<soot.jimple.AbstractExprSwitch: void <init>()>();

        return;
    }

    public void caseStaticInvokeExpr(soot.jimple.StaticInvokeExpr)
    {
        graph.BuildCallGraph$1 this;
        soot.jimple.StaticInvokeExpr v;
        java.util.List $stack2;
        soot.SootMethod $stack3;

        this := @this: graph.BuildCallGraph$1;

        v := @parameter0: soot.jimple.StaticInvokeExpr;

        $stack2 = this.<graph.BuildCallGraph$1: java.util.List val$targetMethodsList>;

        $stack3 = interfaceinvoke v.<soot.jimple.StaticInvokeExpr: soot.SootMethod getMethod()>();

        interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>($stack3);

        return;
    }

    public void caseSpecialInvokeExpr(soot.jimple.SpecialInvokeExpr)
    {
        soot.jimple.SpecialInvokeExpr v;
        soot.SootMethod $stack4, dispatchMethod;
        soot.SootClass declaringClass;
        graph.BuildCallGraph$1 this;
        java.lang.String $stack6;
        java.util.List $stack8;

        this := @this: graph.BuildCallGraph$1;

        v := @parameter0: soot.jimple.SpecialInvokeExpr;

        $stack4 = interfaceinvoke v.<soot.jimple.SpecialInvokeExpr: soot.SootMethod getMethod()>();

        declaringClass = virtualinvoke $stack4.<soot.SootMethod: soot.SootClass getDeclaringClass()>();

        $stack6 = this.<graph.BuildCallGraph$1: java.lang.String val$signature>;

        dispatchMethod = staticinvoke <graph.BuildCallGraph: soot.SootMethod Dispatch(soot.SootClass,java.lang.String)>(declaringClass, $stack6);

        $stack8 = this.<graph.BuildCallGraph$1: java.util.List val$targetMethodsList>;

        interfaceinvoke $stack8.<java.util.List: boolean add(java.lang.Object)>(dispatchMethod);

        return;
    }

    public void caseVirtualInvokeExpr(soot.jimple.VirtualInvokeExpr)
    {
        soot.Scene $stack8, $stack13;
        soot.jimple.VirtualInvokeExpr v;
        soot.Value $stack9;
        soot.Type $stack10;
        java.lang.String $stack11, $stack21;
        soot.SootClass baseClass, c;
        soot.Hierarchy h;
        java.util.ArrayList $stack15, subClasses;
        java.util.List $stack16, $stack23;
        java.util.Iterator l5;
        boolean $stack19;
        java.lang.Object $stack20;
        graph.BuildCallGraph$1 this;
        soot.SootMethod dispatchMethod;

        this := @this: graph.BuildCallGraph$1;

        v := @parameter0: soot.jimple.VirtualInvokeExpr;

        $stack8 = staticinvoke <soot.Scene: soot.Scene v()>();

        $stack9 = interfaceinvoke v.<soot.jimple.VirtualInvokeExpr: soot.Value getBase()>();

        $stack10 = interfaceinvoke $stack9.<soot.Value: soot.Type getType()>();

        $stack11 = virtualinvoke $stack10.<soot.Type: java.lang.String toString()>();

        baseClass = virtualinvoke $stack8.<soot.Scene: soot.SootClass getSootClass(java.lang.String)>($stack11);

        $stack13 = staticinvoke <soot.Scene: soot.Scene v()>();

        h = virtualinvoke $stack13.<soot.Scene: soot.Hierarchy getActiveHierarchy()>();

        virtualinvoke baseClass.<soot.SootClass: void checkLevel(int)>(1);

        $stack15 = new java.util.ArrayList;

        $stack16 = virtualinvoke h.<soot.Hierarchy: java.util.List getSubclassesOf(soot.SootClass)>(baseClass);

        specialinvoke $stack15.<java.util.ArrayList: void <init>(java.util.Collection)>($stack16);

        subClasses = $stack15;

        interfaceinvoke subClasses.<java.util.List: boolean add(java.lang.Object)>(baseClass);

        l5 = interfaceinvoke subClasses.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack19 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>();

        if $stack19 == 0 goto label2;

        $stack20 = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>();

        c = (soot.SootClass) $stack20;

        $stack21 = this.<graph.BuildCallGraph$1: java.lang.String val$signature>;

        dispatchMethod = staticinvoke <graph.BuildCallGraph: soot.SootMethod Dispatch(soot.SootClass,java.lang.String)>(c, $stack21);

        $stack23 = this.<graph.BuildCallGraph$1: java.util.List val$targetMethodsList>;

        interfaceinvoke $stack23.<java.util.List: boolean add(java.lang.Object)>(dispatchMethod);

        goto label1;

     label2:
        return;
    }
}
