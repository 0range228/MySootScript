public class pta.toolkit.Analyzer extends java.lang.Object
{
    private int allocId;
    private java.util.Map wholeLocalMap;
    private java.util.Map queryMap;
    private java.util.Map localCheckMap;
    private java.util.Map transferMap;
    private java.util.Map equalMap;
    public java.lang.StringBuilder tracker;

    private void <init>()
    {
        pta.toolkit.Analyzer this;
        java.lang.StringBuilder $stack1;
        java.util.LinkedHashMap $stack2, $stack3, $stack4, $stack5, $stack6;

        this := @this: pta.toolkit.Analyzer;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $stack1 = new java.lang.StringBuilder;

        specialinvoke $stack1.<java.lang.StringBuilder: void <init>()>();

        this.<pta.toolkit.Analyzer: java.lang.StringBuilder tracker> = $stack1;

        this.<pta.toolkit.Analyzer: int allocId> = 0;

        $stack2 = new java.util.LinkedHashMap;

        specialinvoke $stack2.<java.util.LinkedHashMap: void <init>()>();

        this.<pta.toolkit.Analyzer: java.util.Map wholeLocalMap> = $stack2;

        $stack3 = new java.util.LinkedHashMap;

        specialinvoke $stack3.<java.util.LinkedHashMap: void <init>()>();

        this.<pta.toolkit.Analyzer: java.util.Map queryMap> = $stack3;

        $stack4 = new java.util.LinkedHashMap;

        specialinvoke $stack4.<java.util.LinkedHashMap: void <init>()>();

        this.<pta.toolkit.Analyzer: java.util.Map localCheckMap> = $stack4;

        $stack5 = new java.util.LinkedHashMap;

        specialinvoke $stack5.<java.util.LinkedHashMap: void <init>()>();

        this.<pta.toolkit.Analyzer: java.util.Map transferMap> = $stack5;

        $stack6 = new java.util.LinkedHashMap;

        specialinvoke $stack6.<java.util.LinkedHashMap: void <init>()>();

        this.<pta.toolkit.Analyzer: java.util.Map equalMap> = $stack6;

        return;
    }

    public static pta.toolkit.Analyzer getAnalyzer()
    {
        pta.toolkit.Analyzer $stack0;

        $stack0 = staticinvoke <pta.toolkit.Analyzer$LoadAnalyzer: pta.toolkit.Analyzer access$100()>();

        return $stack0;
    }

    public void addLocal(soot.Local, pta.toolkit.Variable)
    {
        pta.toolkit.Analyzer this;
        soot.Local local;
        java.util.Map $stack4;
        java.util.function.Function $stack5;
        java.lang.Object $stack6;
        java.util.Set vars;
        pta.toolkit.Variable var;

        this := @this: pta.toolkit.Analyzer;

        local := @parameter0: soot.Local;

        var := @parameter1: pta.toolkit.Variable;

        $stack4 = this.<pta.toolkit.Analyzer: java.util.Map wholeLocalMap>;

        $stack5 = staticinvoke <pta.toolkit.Analyzer$lambda_addLocal_0__1: java.util.function.Function bootstrap$()>();

        $stack6 = interfaceinvoke $stack4.<java.util.Map: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>(local, $stack5);

        vars = (java.util.Set) $stack6;

        interfaceinvoke vars.<java.util.Set: boolean add(java.lang.Object)>(var);

        return;
    }

    public void addQuery(int, soot.Local)
    {
        pta.toolkit.Analyzer this;
        int id;
        java.util.Map $stack3;
        java.lang.Integer $stack4;
        soot.Local l;

        this := @this: pta.toolkit.Analyzer;

        id := @parameter0: int;

        l := @parameter1: soot.Local;

        $stack3 = this.<pta.toolkit.Analyzer: java.util.Map queryMap>;

        $stack4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(id);

        interfaceinvoke $stack3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack4, l);

        return;
    }

    public void addLocalCheckMap(soot.Local, pta.toolkit.Variable)
    {
        pta.toolkit.Analyzer this;
        soot.Local local;
        java.util.Map $stack3, $stack5, $stack7;
        java.lang.Object $stack4, $stack8;
        pta.toolkit.Variable var, $stack9;
        java.util.Set $stack10, $stack12;
        int $stack11, $stack13;

        this := @this: pta.toolkit.Analyzer;

        local := @parameter0: soot.Local;

        var := @parameter1: pta.toolkit.Variable;

        $stack3 = this.<pta.toolkit.Analyzer: java.util.Map localCheckMap>;

        $stack4 = interfaceinvoke $stack3.<java.util.Map: java.lang.Object get(java.lang.Object)>(local);

        if $stack4 == null goto label1;

        $stack7 = this.<pta.toolkit.Analyzer: java.util.Map localCheckMap>;

        $stack8 = interfaceinvoke $stack7.<java.util.Map: java.lang.Object get(java.lang.Object)>(local);

        $stack9 = (pta.toolkit.Variable) $stack8;

        $stack10 = virtualinvoke $stack9.<pta.toolkit.Variable: java.util.Set getAllocIdSet()>();

        $stack11 = interfaceinvoke $stack10.<java.util.Set: int size()>();

        $stack12 = virtualinvoke var.<pta.toolkit.Variable: java.util.Set getAllocIdSet()>();

        $stack13 = interfaceinvoke $stack12.<java.util.Set: int size()>();

        if $stack11 <= $stack13 goto label1;

        return;

     label1:
        $stack5 = this.<pta.toolkit.Analyzer: java.util.Map localCheckMap>;

        interfaceinvoke $stack5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(local, var);

        return;
    }

    public void addEqualMap(soot.Local, soot.Local)
    {
        pta.toolkit.Analyzer this;
        soot.Local lvar, rvar;
        java.util.Map $stack3;

        this := @this: pta.toolkit.Analyzer;

        lvar := @parameter0: soot.Local;

        rvar := @parameter1: soot.Local;

        $stack3 = this.<pta.toolkit.Analyzer: java.util.Map equalMap>;

        interfaceinvoke $stack3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(lvar, rvar);

        return;
    }

    public java.lang.String run()
    {
        java.lang.StringBuilder $stack7, $stack43, $stack44, $stack48, $stack63, $stack65, $stack66, $stack70, $stack71, $stack75, $stack77, $stack80, $stack82, $stack83, $stack88, $stack89, $stack93, $stack94, $stack98, $stack100, $stack111, $stack112, $stack116, $stack117, $stack121;
        pta.toolkit.Analyzer this;
        java.util.Map $stack9, $stack14, $stack19, $stack23, fieldMap;
        java.util.Set $stack10, $stack15, $stack20, $stack24, $stack54, $stack74, $stack97, $stack120;
        boolean $stack12, $stack17, $stack22, $stack26, $stack56, $stack62;
        java.io.PrintStream $stack27;
        java.lang.String $stack28, $stack29, $stack37, $stack42, $stack47, $stack61, $stack69, $stack76, $stack92, $stack99, $stack105, $stack110, $stack115;
        java.lang.Object $stack30, $stack32, $stack34, $stack35, $stack40, $stack45, $stack50, $stack58, $stack59, $stack64, $stack67, $stack72, $stack81, $stack84, $stack90, $stack95, $stack102, $stack103, $stack108, $stack113, $stack118;
        soot.Local $stack36, $stack46, $stack104, $stack114;
        char $stack38, $stack106;
        pta.toolkit.Variable $stack41, $stack51, $stack60, $stack68, $stack73, $stack85, $stack91, $stack96, $stack109, $stack119;
        pta.toolkit.Member $stack52, $stack86;
        java.util.Iterator l5, l2;
        java.util.Map$Entry fieldMapEntry, entry;
        soot.Value $stack87;

        this := @this: pta.toolkit.Analyzer;

        $stack7 = new java.lang.StringBuilder;

        specialinvoke $stack7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Result : \n");

        $stack9 = this.<pta.toolkit.Analyzer: java.util.Map localCheckMap>;

        $stack10 = interfaceinvoke $stack9.<java.util.Map: java.util.Set entrySet()>();

        l2 = interfaceinvoke $stack10.<java.util.Set: java.util.Iterator iterator()>();

     label01:
        $stack12 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>();

        if $stack12 == 0 goto label03;

        $stack102 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        entry = (java.util.Map$Entry) $stack102;

        $stack103 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getKey()>();

        $stack104 = (soot.Local) $stack103;

        $stack105 = interfaceinvoke $stack104.<soot.Local: java.lang.String getName()>();

        $stack106 = virtualinvoke $stack105.<java.lang.String: char charAt(int)>(0);

        if $stack106 == 36 goto label02;

        $stack108 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getValue()>();

        $stack109 = (pta.toolkit.Variable) $stack108;

        $stack110 = virtualinvoke $stack109.<pta.toolkit.Variable: java.lang.String getClassName()>();

        $stack111 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack110);

        $stack112 = virtualinvoke $stack111.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" : ");

        $stack113 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getKey()>();

        $stack114 = (soot.Local) $stack113;

        $stack115 = interfaceinvoke $stack114.<soot.Local: java.lang.String getName()>();

        $stack116 = virtualinvoke $stack112.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack115);

        $stack117 = virtualinvoke $stack116.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" : ");

        $stack118 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getValue()>();

        $stack119 = (pta.toolkit.Variable) $stack118;

        $stack120 = virtualinvoke $stack119.<pta.toolkit.Variable: java.util.Set getAllocIdSet()>();

        $stack121 = virtualinvoke $stack117.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack120);

        virtualinvoke $stack121.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

     label02:
        goto label01;

     label03:
        virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nObj\'s Fields : \n");

        $stack14 = this.<pta.toolkit.Analyzer: java.util.Map localCheckMap>;

        $stack15 = interfaceinvoke $stack14.<java.util.Map: java.util.Set entrySet()>();

        l2 = interfaceinvoke $stack15.<java.util.Set: java.util.Iterator iterator()>();

     label04:
        $stack17 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>();

        if $stack17 == 0 goto label10;

        $stack34 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        entry = (java.util.Map$Entry) $stack34;

        $stack35 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getKey()>();

        $stack36 = (soot.Local) $stack35;

        $stack37 = interfaceinvoke $stack36.<soot.Local: java.lang.String getName()>();

        $stack38 = virtualinvoke $stack37.<java.lang.String: char charAt(int)>(0);

        if $stack38 == 36 goto label09;

        $stack40 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getValue()>();

        $stack41 = (pta.toolkit.Variable) $stack40;

        $stack42 = virtualinvoke $stack41.<pta.toolkit.Variable: java.lang.String getClassName()>();

        $stack43 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack42);

        $stack44 = virtualinvoke $stack43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" : ");

        $stack45 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getKey()>();

        $stack46 = (soot.Local) $stack45;

        $stack47 = interfaceinvoke $stack46.<soot.Local: java.lang.String getName()>();

        $stack48 = virtualinvoke $stack44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack47);

        virtualinvoke $stack48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" : ");

        $stack50 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getValue()>();

        $stack51 = (pta.toolkit.Variable) $stack50;

        $stack52 = virtualinvoke $stack51.<pta.toolkit.Variable: pta.toolkit.Member getMember()>();

        fieldMap = virtualinvoke $stack52.<pta.toolkit.Member: java.util.Map getFieldMap()>();

        $stack54 = interfaceinvoke fieldMap.<java.util.Map: java.util.Set entrySet()>();

        l5 = interfaceinvoke $stack54.<java.util.Set: java.util.Iterator iterator()>();

     label05:
        $stack56 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>();

        if $stack56 == 0 goto label08;

        $stack58 = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>();

        fieldMapEntry = (java.util.Map$Entry) $stack58;

        $stack59 = interfaceinvoke fieldMapEntry.<java.util.Map$Entry: java.lang.Object getValue()>();

        $stack60 = (pta.toolkit.Variable) $stack59;

        $stack61 = virtualinvoke $stack60.<pta.toolkit.Variable: java.lang.String getName()>();

        $stack62 = virtualinvoke $stack61.<java.lang.String: boolean contains(java.lang.CharSequence)>("ConstantValue");

        if $stack62 == 0 goto label06;

        $stack80 = new java.lang.StringBuilder;

        specialinvoke $stack80.<java.lang.StringBuilder: void <init>()>();

        $stack81 = interfaceinvoke fieldMapEntry.<java.util.Map$Entry: java.lang.Object getKey()>();

        $stack82 = virtualinvoke $stack80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack81);

        $stack83 = virtualinvoke $stack82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" value ");

        $stack84 = interfaceinvoke fieldMapEntry.<java.util.Map$Entry: java.lang.Object getValue()>();

        $stack85 = (pta.toolkit.Variable) $stack84;

        $stack86 = virtualinvoke $stack85.<pta.toolkit.Variable: pta.toolkit.Member getMember()>();

        $stack87 = virtualinvoke $stack86.<pta.toolkit.Member: soot.Value getValue()>();

        $stack88 = virtualinvoke $stack83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack87);

        $stack89 = virtualinvoke $stack88.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from ");

        $stack90 = interfaceinvoke fieldMapEntry.<java.util.Map$Entry: java.lang.Object getValue()>();

        $stack91 = (pta.toolkit.Variable) $stack90;

        $stack92 = virtualinvoke $stack91.<pta.toolkit.Variable: java.lang.String getClassName()>();

        $stack93 = virtualinvoke $stack89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack92);

        $stack94 = virtualinvoke $stack93.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" : ");

        $stack95 = interfaceinvoke fieldMapEntry.<java.util.Map$Entry: java.lang.Object getValue()>();

        $stack96 = (pta.toolkit.Variable) $stack95;

        $stack97 = virtualinvoke $stack96.<pta.toolkit.Variable: java.util.Set getAllocIdSet()>();

        $stack98 = virtualinvoke $stack94.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack97);

        $stack99 = virtualinvoke $stack98.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack100 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack99);

        virtualinvoke $stack100.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" , ");

        goto label07;

     label06:
        $stack63 = new java.lang.StringBuilder;

        specialinvoke $stack63.<java.lang.StringBuilder: void <init>()>();

        $stack64 = interfaceinvoke fieldMapEntry.<java.util.Map$Entry: java.lang.Object getKey()>();

        $stack65 = virtualinvoke $stack63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack64);

        $stack66 = virtualinvoke $stack65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from ");

        $stack67 = interfaceinvoke fieldMapEntry.<java.util.Map$Entry: java.lang.Object getValue()>();

        $stack68 = (pta.toolkit.Variable) $stack67;

        $stack69 = virtualinvoke $stack68.<pta.toolkit.Variable: java.lang.String getClassName()>();

        $stack70 = virtualinvoke $stack66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack69);

        $stack71 = virtualinvoke $stack70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" : ");

        $stack72 = interfaceinvoke fieldMapEntry.<java.util.Map$Entry: java.lang.Object getValue()>();

        $stack73 = (pta.toolkit.Variable) $stack72;

        $stack74 = virtualinvoke $stack73.<pta.toolkit.Variable: java.util.Set getAllocIdSet()>();

        $stack75 = virtualinvoke $stack71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack74);

        $stack76 = virtualinvoke $stack75.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack77 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack76);

        virtualinvoke $stack77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

     label07:
        goto label05;

     label08:
        virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

     label09:
        goto label04;

     label10:
        virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nTrack Changes : \n");

        $stack19 = this.<pta.toolkit.Analyzer: java.util.Map transferMap>;

        $stack20 = interfaceinvoke $stack19.<java.util.Map: java.util.Set entrySet()>();

        l2 = interfaceinvoke $stack20.<java.util.Set: java.util.Iterator iterator()>();

     label11:
        $stack22 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>();

        if $stack22 == 0 goto label12;

        $stack32 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        entry = (java.util.Map$Entry) $stack32;

        goto label11;

     label12:
        $stack23 = this.<pta.toolkit.Analyzer: java.util.Map transferMap>;

        $stack24 = interfaceinvoke $stack23.<java.util.Map: java.util.Set entrySet()>();

        l2 = interfaceinvoke $stack24.<java.util.Set: java.util.Iterator iterator()>();

     label13:
        $stack26 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>();

        if $stack26 == 0 goto label14;

        $stack30 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        entry = (java.util.Map$Entry) $stack30;

        goto label13;

     label14:
        $stack27 = <java.lang.System: java.io.PrintStream out>;

        $stack28 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $stack27.<java.io.PrintStream: void println(java.lang.String)>($stack28);

        $stack29 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack29;
    }

    public void trackTransferMap(pta.toolkit.Context, pta.toolkit.Variable, pta.toolkit.Variable)
    {
        pta.toolkit.Analyzer this;
        pta.toolkit.Variable lvar, rvar;
        java.util.Map $stack4;
        pta.toolkit.Context context;

        this := @this: pta.toolkit.Analyzer;

        context := @parameter0: pta.toolkit.Context;

        lvar := @parameter1: pta.toolkit.Variable;

        rvar := @parameter2: pta.toolkit.Variable;

        $stack4 = this.<pta.toolkit.Analyzer: java.util.Map transferMap>;

        interfaceinvoke $stack4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(lvar, rvar);

        return;
    }

    public void trackTransferMap(pta.toolkit.Context, pta.toolkit.Variable, pta.toolkit.Variable, pta.toolkit.Variable, soot.SootFieldRef)
    {
        pta.toolkit.Variable baseVar, variable, lvar, rvar;
        pta.toolkit.Member $stack8;
        java.util.Map $stack9, $stack11;
        soot.SootFieldRef sfr;
        java.lang.Object $stack10;
        pta.toolkit.Analyzer this;
        pta.toolkit.Context context;

        this := @this: pta.toolkit.Analyzer;

        context := @parameter0: pta.toolkit.Context;

        lvar := @parameter1: pta.toolkit.Variable;

        rvar := @parameter2: pta.toolkit.Variable;

        baseVar := @parameter3: pta.toolkit.Variable;

        sfr := @parameter4: soot.SootFieldRef;

        $stack8 = virtualinvoke baseVar.<pta.toolkit.Variable: pta.toolkit.Member getMember()>();

        $stack9 = virtualinvoke $stack8.<pta.toolkit.Member: java.util.Map getFieldMap()>();

        $stack10 = interfaceinvoke $stack9.<java.util.Map: java.lang.Object get(java.lang.Object)>(sfr);

        variable = (pta.toolkit.Variable) $stack10;

        $stack11 = this.<pta.toolkit.Analyzer: java.util.Map transferMap>;

        interfaceinvoke $stack11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(lvar, variable);

        return;
    }

    public java.util.Map getEqualMap()
    {
        pta.toolkit.Analyzer this;
        java.util.Map $stack1;

        this := @this: pta.toolkit.Analyzer;

        $stack1 = this.<pta.toolkit.Analyzer: java.util.Map equalMap>;

        return $stack1;
    }

    public int getAllocId()
    {
        pta.toolkit.Analyzer this;
        int $stack1;

        this := @this: pta.toolkit.Analyzer;

        $stack1 = this.<pta.toolkit.Analyzer: int allocId>;

        return $stack1;
    }

    public void setAllocId(int)
    {
        pta.toolkit.Analyzer this;
        int allocId;

        this := @this: pta.toolkit.Analyzer;

        allocId := @parameter0: int;

        this.<pta.toolkit.Analyzer: int allocId> = allocId;

        return;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $stack1, $stack2, $stack4, $stack5, $stack7, $stack8;
        pta.toolkit.Analyzer this;
        java.util.Map $stack3, $stack6;
        java.lang.String $stack9;

        this := @this: pta.toolkit.Analyzer;

        $stack1 = new java.lang.StringBuilder;

        specialinvoke $stack1.<java.lang.StringBuilder: void <init>()>();

        $stack2 = virtualinvoke $stack1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Analyzer{ ");

        $stack3 = this.<pta.toolkit.Analyzer: java.util.Map wholeLocalMap>;

        $stack4 = virtualinvoke $stack2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack3);

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $stack6 = this.<pta.toolkit.Analyzer: java.util.Map queryMap>;

        $stack7 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack6);

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" }");

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack9;
    }

    public static java.util.Set lambda$addLocal$0(soot.Local)
    {
        java.util.HashSet $stack1;
        soot.Local k;

        k := @parameter0: soot.Local;

        $stack1 = new java.util.HashSet;

        specialinvoke $stack1.<java.util.HashSet: void <init>()>();

        return $stack1;
    }

    void <init>(pta.toolkit.Analyzer$1)
    {
        pta.toolkit.Analyzer this;
        pta.toolkit.Analyzer$1 x0;

        this := @this: pta.toolkit.Analyzer;

        x0 := @parameter0: pta.toolkit.Analyzer$1;

        specialinvoke this.<pta.toolkit.Analyzer: void <init>()>();

        return;
    }
}
